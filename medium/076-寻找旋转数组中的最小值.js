/**
已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：
若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]
若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]
注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。

给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。

你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。

 

示例 1：

输入：nums = [3,4,5,1,2]
输出：1
解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。
示例 2：

输入：nums = [4,5,6,7,0,1,2]
输出：0
解释：原数组为 [0,1,2,4,5,6,7] ，旋转 3 次得到输入数组。
示例 3：

输入：nums = [11,13,15,17]
输出：11
 */

/**
 * @param {number[]} nums
 * @return {number}
 */
// 思路：中间值左右区间一定有一个区间是有序的，可以直接得到这个区间的最小值，另一个区间继续二分查找
var findMin = function (nums) {
  let min = Infinity;
  let l = 0;
  let r = nums.length - 1;
  while (l <= r) {
    const mid = ((r + l) / 2) >> 0;
    if (nums[l] <= nums[mid]) {
      min = Math.min(nums[l], min);
      l = mid + 1;
    } else {
      min = Math.min(nums[mid], min);
      r = mid - 1;
    }
  }
  return min;
};
console.log(findMin([3,1,2]))
//module.exports =
